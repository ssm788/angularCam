{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostService {\n  /*------------------------------------------\r\n  --------------------------------------------\r\n  Http Header Options\r\n  --------------------------------------------\r\n  --------------------------------------------*/\n  // httpOptions = {\n  //   headers: new HttpHeaders({\n  //     'Content-Type': 'application/json',\n  //     'Access-Control-Allow-Origin': '*',\n  //     'Authorization': localStorage.getItem('token')+\"\"\n  //   })\n  // }\n  /*------------------------------------------\r\n  --------------------------------------------\r\n  Created constructor\r\n  --------------------------------------------\r\n  --------------------------------------------*/\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // private apiURL = \"https://jsonplaceholder.typicode.com\";\n    this.apiURL = \"http://localhost:8080/api/v1/auth\";\n  }\n  /**\r\n   * Write code on Method\r\n   *\r\n   * @return response()\r\n   */\n  getAll() {\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Authorization': localStorage.getItem('token') + \"\"\n      })\n    };\n    return this.httpClient.get(this.apiURL + '/camera', httpOptions).pipe(catchError(this.errorHandler));\n  }\n  /**\r\n   * Write code on Method\r\n   *\r\n   * @return response()\r\n   */\n  create(post) {\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Authorization': localStorage.getItem('token') + \"\"\n      })\n    };\n    //return this.httpClient.post(this.apiURL + '/camera/', JSON.stringify(post), this.httpOptions)\n    return this.httpClient.post(this.apiURL + '/camera', post, httpOptions).pipe(catchError(this.errorHandler));\n  }\n  /**\r\n   * Write code on Method\r\n   *\r\n   * @return response()\r\n   */\n  find(id) {\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Authorization': localStorage.getItem('token') + \"\"\n      })\n    };\n    return this.httpClient.get(this.apiURL + '/camera/' + id, httpOptions).pipe(catchError(this.errorHandler));\n  }\n  /**\r\n   * Write code on Method\r\n   *\r\n   * @return response()\r\n   */\n  update(id, post) {\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Authorization': localStorage.getItem('token') + \"\"\n      })\n    };\n    return this.httpClient.put(this.apiURL + '/camera/' + id, post, httpOptions).pipe(catchError(this.errorHandler));\n  }\n  /**\r\n   * Write code on Method\r\n   *\r\n   * @return response()\r\n   */\n  delete(id) {\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Authorization': localStorage.getItem('token') + \"\"\n      })\n    };\n    return this.httpClient.delete(this.apiURL + '/camera/' + id, httpOptions).pipe(catchError(this.errorHandler));\n  }\n  /**\r\n   * Write code on Method\r\n   *\r\n   * @return response()\r\n   */\n  errorHandler(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n}\nPostService.ɵfac = function PostService_Factory(t) {\n  return new (t || PostService)(i0.ɵɵinject(i1.HttpClient));\n};\nPostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PostService,\n  factory: PostService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","throwError","catchError","PostService","constructor","httpClient","getAll","httpOptions","headers","localStorage","getItem","get","apiURL","pipe","errorHandler","create","post","find","id","update","put","delete","error","errorMessage","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["F:\\shyam\\PIP\\angular\\my-crud-app\\angularCam\\src\\app\\post\\post.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n     \nimport {  Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n  \nimport { Post } from './post';\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n\n  \n // private apiURL = \"https://jsonplaceholder.typicode.com\";\n  private apiURL = \"http://localhost:8080/api/v1/auth\";\n  \n    \n  /*------------------------------------------\n  --------------------------------------------\n  Http Header Options\n  --------------------------------------------\n  --------------------------------------------*/\n  \n \n  // httpOptions = {\n  //   headers: new HttpHeaders({\n  //     'Content-Type': 'application/json',\n  //     'Access-Control-Allow-Origin': '*',\n  //     'Authorization': localStorage.getItem('token')+\"\"\n  //   })\n  // }\n   \n  /*------------------------------------------\n  --------------------------------------------\n  Created constructor\n  --------------------------------------------\n  --------------------------------------------*/\n  constructor(private httpClient: HttpClient) { }\n    \n  /**\n   * Write code on Method\n   *\n   * @return response()\n   */\n  getAll(): Observable<any> {\n   \n   let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Authorization': localStorage.getItem('token')+\"\"\n      })\n    }\n    return this.httpClient.get(this.apiURL + '/camera',httpOptions)\n  \n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n    \n  /**\n   * Write code on Method\n   *\n   * @return response()\n   */\n  create(post:any): Observable<any> {\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Authorization': localStorage.getItem('token')+\"\"\n      })\n    }\n     //return this.httpClient.post(this.apiURL + '/camera/', JSON.stringify(post), this.httpOptions)\n    return this.httpClient.post(this.apiURL + '/camera', post,httpOptions)\n  \n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }  \n    \n  /**\n   * Write code on Method\n   *\n   * @return response()\n   */\n  find(id:number): Observable<any> {\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Authorization': localStorage.getItem('token')+\"\"\n      })\n    }\n    return this.httpClient.get(this.apiURL + '/camera/' + id,httpOptions)\n  \n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n    \n  /**\n   * Write code on Method\n   *\n   * @return response()\n   */\n  update(id:number, post:any): Observable<any> {\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Authorization': localStorage.getItem('token')+\"\"\n      })\n    }\n    return this.httpClient.put(this.apiURL + '/camera/' + id, post,httpOptions)\n \n    .pipe( \n      catchError(this.errorHandler)\n    )\n  }\n       \n  /**\n   * Write code on Method\n   *\n   * @return response()\n   */\n  delete(id:number){\n\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Authorization': localStorage.getItem('token')+\"\"\n      })\n    }\n    return this.httpClient.delete(this.apiURL + '/camera/' + id,httpOptions)\n  \n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n      \n  /** \n   * Write code on Method\n   *\n   * @return response()\n   */\n  errorHandler(error:any) {\n    let errorMessage = '';\n    if(error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(errorMessage);\n }\n  }\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}