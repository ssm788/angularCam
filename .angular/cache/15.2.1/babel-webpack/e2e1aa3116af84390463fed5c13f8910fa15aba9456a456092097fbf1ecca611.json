{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../post.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction EditComponent_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Title is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, EditComponent_div_10_div_1_Template, 2, 0, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f[\"title\"].errors && ctx_r0.f[\"title\"].errors[\"required\"]);\n  }\n}\nfunction EditComponent_div_16_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Body is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, EditComponent_div_16_div_1_Template, 2, 0, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f[\"body\"].errors && ctx_r1.f[\"body\"].errors[\"required\"]);\n  }\n}\nexport class EditComponent {\n  /*------------------------------------------\r\n  --------------------------------------------\r\n  Created constructor\r\n  --------------------------------------------\r\n  --------------------------------------------*/\n  constructor(postService, route, router) {\n    this.postService = postService;\n    this.route = route;\n    this.router = router;\n  }\n  /**\r\n   * Write code on Method\r\n   *\r\n   * @return response()\r\n   */\n  ngOnInit() {\n    this.id = this.route.snapshot.params['idcamera'];\n    this.postService.find(this.id).subscribe(data => {\n      this.post = data;\n    });\n    this.form = new FormGroup({\n      title: new FormControl('', [Validators.required]),\n      body: new FormControl('', Validators.required)\n    });\n  }\n  /**\r\n   * Write code on Method\r\n   *\r\n   * @return response()\r\n   */\n  get f() {\n    return this.form.controls;\n  }\n  /**\r\n   * Write code on Method\r\n   *\r\n   * @return response()\r\n   */\n  submit() {\n    console.log(this.form.value);\n    this.postService.update(this.id, this.form.value).subscribe(res => {\n      console.log('Post updated successfully!');\n      this.router.navigateByUrl('post/index');\n    });\n  }\n}\nEditComponent.ɵfac = function EditComponent_Factory(t) {\n  return new (t || EditComponent)(i0.ɵɵdirectiveInject(i1.PostService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n};\nEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditComponent,\n  selectors: [[\"app-edit\"]],\n  decls: 19,\n  vars: 6,\n  consts: [[1, \"container\"], [\"href\", \"#\", \"routerLink\", \"/post/index\", 1, \"btn\", \"btn-primary\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"title\"], [\"formControlName\", \"title\", \"id\", \"title\", \"type\", \"text\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"for\", \"body\"], [\"formControlName\", \"body\", \"id\", \"body\", \"type\", \"text\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"alert\", \"alert-danger\"], [4, \"ngIf\"]],\n  template: function EditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n      i0.ɵɵtext(2, \"Update Post\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"a\", 1);\n      i0.ɵɵtext(4, \"Back\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function EditComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵelementStart(6, \"div\", 3)(7, \"label\", 4);\n      i0.ɵɵtext(8, \"Title:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function EditComponent_Template_input_ngModelChange_9_listener($event) {\n        return ctx.post.title = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, EditComponent_div_10_Template, 2, 1, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 3)(12, \"label\", 7);\n      i0.ɵɵtext(13, \"Body\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"textarea\", 8);\n      i0.ɵɵlistener(\"ngModelChange\", function EditComponent_Template_textarea_ngModelChange_14_listener($event) {\n        return ctx.post.body = $event;\n      });\n      i0.ɵɵtext(15, \"            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(16, EditComponent_div_16_Template, 2, 1, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"button\", 9);\n      i0.ɵɵtext(18, \"Update\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.post.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.f[\"title\"].touched && ctx.f[\"title\"].invalid);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.post.body);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.f[\"body\"].touched && ctx.f[\"body\"].invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.form.valid);\n    }\n  },\n  dependencies: [i3.NgIf, i2.RouterLink, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAO,gBAAgB;;;;;;;;ICYlDC,2BAAgE;IAAAA,kCAAkB;IAAAA,iBAAM;;;;;IAD5FA,+BAAiF;IAC7EA,sEAAwF;IAC5FA,iBAAM;;;;IADIA,eAAwD;IAAxDA,uFAAwD;;;;;IAc9DA,2BAA8D;IAAAA,iCAAiB;IAAAA,iBAAM;;;;;IADzFA,+BAA+E;IAC3EA,sEAAqF;IACzFA,iBAAM;;;;IADIA,eAAsD;IAAtDA,qFAAsD;;;ADnB5E,OAAM,MAAOC,aAAa;EAMxB;;;;;EAKAC,YACSC,WAAwB,EACvBC,KAAqB,EACrBC,MAAc;IAFf,gBAAW,GAAXF,WAAW;IACV,UAAK,GAALC,KAAK;IACL,WAAM,GAANC,MAAM;EACZ;EAEJ;;;;;EAKAC,QAAQ;IACN,IAAI,CAACC,EAAE,GAAG,IAAI,CAACH,KAAK,CAACI,QAAQ,CAACC,MAAM,CAAC,UAAU,CAAC;IAChD,IAAI,CAACN,WAAW,CAACO,IAAI,CAAC,IAAI,CAACH,EAAE,CAAC,CAACI,SAAS,CAAEC,IAAU,IAAG;MACrD,IAAI,CAACC,IAAI,GAAGD,IAAI;IAClB,CAAC,CAAC;IAEF,IAAI,CAACE,IAAI,GAAG,IAAIjB,SAAS,CAAC;MACxBkB,KAAK,EAAE,IAAIjB,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACiB,QAAQ,CAAC,CAAC;MACjDC,IAAI,EAAE,IAAInB,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACiB,QAAQ;KAC9C,CAAC;EACJ;EAEA;;;;;EAKA,IAAIE,CAAC;IACH,OAAO,IAAI,CAACJ,IAAI,CAACK,QAAQ;EAC3B;EAEA;;;;;EAKAC,MAAM;IACJC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,IAAI,CAACS,KAAK,CAAC;IAC5B,IAAI,CAACpB,WAAW,CAACqB,MAAM,CAAC,IAAI,CAACjB,EAAE,EAAE,IAAI,CAACO,IAAI,CAACS,KAAK,CAAC,CAACZ,SAAS,CAAEc,GAAO,IAAI;MACnEJ,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC,IAAI,CAACjB,MAAM,CAACqB,aAAa,CAAC,YAAY,CAAC;IAC5C,CAAC,CAAC;EACJ;;AAtDWzB,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAA0B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX1B/B,8BAAuB;MACfA,2BAAW;MAAAA,iBAAK;MAEpBA,4BAA6D;MAAAA,oBAAI;MAAAA,iBAAI;MAErEA,+BAA+C;MAAtBA;QAAA,OAAYgC,YAAQ;MAAA,EAAC;MAE1ChC,8BAAwB;MACDA,sBAAM;MAAAA,iBAAQ;MACjCA,gCAKyB;MADrBA;QAAA;MAAA,EAAwB;MAJ5BA,iBAKyB;MACzBA,gEAEM;MACVA,iBAAM;MAENA,+BAAwB;MACFA,qBAAI;MAAAA,iBAAQ;MAC9BA,oCAKyB;MADrBA;QAAA;MAAA,EAAuB;MAE3BA;MAAAA,iBAAW;MACXA,gEAEM;MACVA,iBAAM;MAENA,kCAAuE;MAAAA,uBAAM;MAAAA,iBAAS;;;MA7BpFA,eAAkB;MAAlBA,oCAAkB;MAQZA,eAAwB;MAAxBA,wCAAwB;MAEtBA,eAA8C;MAA9CA,uEAA8C;MAWhDA,eAAuB;MAAvBA,uCAAuB;MAGrBA,eAA4C;MAA5CA,qEAA4C;MAKRA,eAAwB;MAAxBA,0CAAwB","names":["FormGroup","FormControl","Validators","i0","EditComponent","constructor","postService","route","router","ngOnInit","id","snapshot","params","find","subscribe","data","post","form","title","required","body","f","controls","submit","console","log","value","update","res","navigateByUrl","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["F:\\shyam\\PIP\\angular\\my-crud-app\\angularCam\\src\\app\\post\\edit\\edit.component.ts","F:\\shyam\\PIP\\angular\\my-crud-app\\angularCam\\src\\app\\post\\edit\\edit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { PostService } from '../post.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Post } from '../post';\nimport { FormGroup, FormControl, Validators} from '@angular/forms';\n     \n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})\nexport class EditComponent implements OnInit {\n      \n  id!: number;\n  post!: Post;\n  form!: FormGroup;\n    \n  /*------------------------------------------\n  --------------------------------------------\n  Created constructor\n  --------------------------------------------\n  --------------------------------------------*/\n  constructor(\n    public postService: PostService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) { }\n    \n  /**\n   * Write code on Method\n   *\n   * @return response()\n   */\n  ngOnInit(): void {\n    this.id = this.route.snapshot.params['idcamera'];\n    this.postService.find(this.id).subscribe((data: Post)=>{\n      this.post = data;\n    }); \n      \n    this.form = new FormGroup({\n      title: new FormControl('', [Validators.required]),\n      body: new FormControl('', Validators.required)\n    });\n  }\n    \n  /**\n   * Write code on Method\n   *\n   * @return response()\n   */\n  get f(){\n    return this.form.controls;\n  }\n    \n  /**\n   * Write code on Method\n   *\n   * @return response()\n   */\n  submit(){\n    console.log(this.form.value);\n    this.postService.update(this.id, this.form.value).subscribe((res:any) => {\n         console.log('Post updated successfully!');\n         this.router.navigateByUrl('post/index');\n    })\n  }\n   \n}","<div class=\"container\">\n    <h1>Update Post</h1>\n   \n    <a href=\"#\" routerLink=\"/post/index\" class=\"btn btn-primary\">Back</a>\n          \n    <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n    \n        <div class=\"form-group\">\n            <label for=\"title\">Title:</label>\n            <input \n                formControlName=\"title\"\n                id=\"title\" \n                type=\"text\" \n                [(ngModel)]=\"post.title\"\n                class=\"form-control\">\n            <div *ngIf=\"f['title'].touched && f['title'].invalid\" class=\"alert alert-danger\">\n                <div *ngIf=\"f['title'].errors && f['title'].errors['required']\">Title is required.</div>\n            </div>\n        </div>\n           \n        <div class=\"form-group\">\n            <label for=\"body\">Body</label>\n            <textarea \n                formControlName=\"body\"\n                id=\"body\" \n                type=\"text\" \n                [(ngModel)]=\"post.body\"\n                class=\"form-control\">\n            </textarea>\n            <div *ngIf=\"f['body'].touched && f['body'].invalid\" class=\"alert alert-danger\">\n                <div *ngIf=\"f['body'].errors && f['body'].errors['required']\">Body is required.</div>\n            </div>\n        </div>\n         \n        <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!form.valid\">Update</button>\n    </form>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}