{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction LoginComponent_div_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"username is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtemplate(1, LoginComponent_div_9_div_1_Template, 2, 0, \"div\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f[\"username\"].errors && ctx_r0.f[\"username\"].errors[\"required\"]);\n  }\n}\nfunction LoginComponent_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtemplate(1, LoginComponent_div_14_div_1_Template, 2, 0, \"div\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f[\"password\"].errors && ctx_r1.f[\"password\"].errors[\"required\"]);\n  }\n}\nfunction LoginComponent_div_19_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"poleId is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtemplate(1, LoginComponent_div_19_div_1_Template, 2, 0, \"div\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.f[\"poleId\"].errors && ctx_r2.f[\"poleId\"].errors[\"required\"]);\n  }\n}\nexport class LoginComponent {\n  constructor(formBuilder, route, router\n  // private accountService: AccountService,\n  // private alertService: AlertService\n  ) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.loading = false;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    //  this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    // this.accountService.login(this.f.username.value, this.f.password.value)\n    //     .pipe(first())\n    //     .subscribe({\n    //         next: () => {\n    //             // get return url from query parameters or default to home page\n    //             const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    //             this.router.navigateByUrl(returnUrl);\n    //         },\n    //         error: error => {\n    //             this.alertService.error(error);\n    //             this.loading = false;\n    //         }\n    //     });\n  }\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 22,\n  vars: 5,\n  consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"username\"], [\"formControlName\", \"username\", \"id\", \"username\", \"type\", \"text\", 1, \"form-control\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"for\", \"password\"], [\"formControlName\", \"password\", \"id\", \"password\", \"type\", \"text\", 1, \"form-control\"], [\"for\", \"poleId\"], [\"formControlName\", \"poleId\", \"id\", \"poleId\", \"type\", \"text\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"alert\", \"alert-danger\"], [4, \"ngIf\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\", 1);\n      i0.ɵɵtext(2, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n      i0.ɵɵtext(7, \"username:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 6);\n      i0.ɵɵtemplate(9, LoginComponent_div_9_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 4)(11, \"label\", 8);\n      i0.ɵɵtext(12, \"password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 9);\n      i0.ɵɵtemplate(14, LoginComponent_div_14_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 4)(16, \"label\", 10);\n      i0.ɵɵtext(17, \"poleId:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"input\", 11);\n      i0.ɵɵtemplate(19, LoginComponent_div_19_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"button\", 12);\n      i0.ɵɵtext(21, \"Submit\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.f[\"username\"].touched && ctx.f[\"username\"].invalid);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.f[\"password\"].touched && ctx.f[\"password\"].invalid);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.f[\"poleId\"].touched && ctx.f[\"poleId\"].invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.formCam.valid);\n    }\n  },\n  dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAKA,SAAiCA,UAAU,QAAmB,gBAAgB;;;;;;;ICQ1DC,2BAAsE;IAAAA,qCAAqB;IAAAA,iBAAM;;;;;IADrGA,+BAAuF;IACnFA,sEAAiG;IACrGA,iBAAM;;;;IADIA,eAA8D;IAA9DA,6FAA8D;;;;;IAYpEA,2BAAsE;IAAAA,qCAAqB;IAAAA,iBAAM;;;;;IADrGA,+BAAuF;IACnFA,uEAAiG;IACrGA,iBAAM;;;;IADIA,eAA8D;IAA9DA,6FAA8D;;;;;IAapEA,2BAAkE;IAAAA,mCAAmB;IAAAA,iBAAM;;;;;IAD/FA,+BAAmF;IAC/EA,uEAA2F;IAC/FA,iBAAM;;;;IADIA,eAA0D;IAA1DA,yFAA0D;;;AD3BpF,OAAM,MAAOC,cAAc;EAMvBC,YACYC,WAAwB,EACxBC,KAAqB,EACrBC;EACR;EACA;EAAA;IAJQ,gBAAW,GAAXF,WAAW;IACX,UAAK,GAALC,KAAK;IACL,WAAM,GAANC,MAAM;IANlB,YAAO,GAAG,KAAK;IACf,cAAS,GAAG,KAAK;EAQb;EAEJC,QAAQ;IACJ,IAAI,CAACC,IAAI,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MAC/BC,QAAQ,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACW,QAAQ;KACrC,CAAC;EACN;EAEA;EACA,IAAIE,CAAC;IAAK,OAAO,IAAI,CAACL,IAAI,CAACM,QAAQ;EAAE;EAErCC,QAAQ;IACJ,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB;IACF;IAEE;IACA,IAAI,IAAI,CAACR,IAAI,CAACS,OAAO,EAAE;MACnB;;IAGJ,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;;;AAjDShB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAiB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX3BtB,8BAAkB;MACUA,qBAAK;MAAAA,iBAAK;MAClCA,8BAAuB;MACMA;QAAA,OAAYuB,YAAQ;MAAA,EAAC;MAE1CvB,8BAAwB;MACEA,yBAAS;MAAAA,iBAAQ;MACvCA,2BAIyB;MACzBA,+DAEM;MACVA,iBAAM;MAENA,+BAAwB;MACEA,0BAAS;MAAAA,iBAAQ;MACvCA,4BAIyB;MACzBA,iEAEM;MACVA,iBAAM;MAGNA,+BAAwB;MACAA,wBAAO;MAAAA,iBAAQ;MACnCA,6BAIyB;MACzBA,iEAEM;MACVA,iBAAM;MAINA,mCAA0E;MAAAA,uBAAM;MAAAA,iBAAS;;;MAzCvFA,eAAkB;MAAlBA,oCAAkB;MASVA,eAAoD;MAApDA,6EAAoD;MAYpDA,eAAoD;MAApDA,6EAAoD;MAapDA,eAAgD;MAAhDA,yEAAgD;MAOZA,eAA2B;MAA3BA,6CAA2B","names":["Validators","i0","LoginComponent","constructor","formBuilder","route","router","ngOnInit","form","group","username","required","password","f","controls","onSubmit","submitted","invalid","loading","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["F:\\shyam\\PIP\\angular\\my-crud-app\\angularCam\\src\\app\\post\\login\\login.component.ts","F:\\shyam\\PIP\\angular\\my-crud-app\\angularCam\\src\\app\\post\\login\\login.component.html"],"sourcesContent":["\nimport { Component, OnInit } from '@angular/core';\nimport { PostService } from '../post.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Post } from '../post';\nimport { FormGroup, FormControl, Validators,FormBuilder} from '@angular/forms';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n    \n  form!: FormGroup;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router\n        // private accountService: AccountService,\n        // private alertService: AlertService\n    ) { }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n      //  this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        // this.accountService.login(this.f.username.value, this.f.password.value)\n        //     .pipe(first())\n        //     .subscribe({\n        //         next: () => {\n        //             // get return url from query parameters or default to home page\n        //             const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n        //             this.router.navigateByUrl(returnUrl);\n        //         },\n        //         error: error => {\n        //             this.alertService.error(error);\n        //             this.loading = false;\n        //         }\n        //     });\n    }  \n}\n","<div class=\"card\">\n    <h4 class=\"card-header\">Login</h4>\n    <div class=\"card-body\">\n        <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n  \n            <div class=\"form-group\">\n                <label for=\"username\">username:</label>\n                <input \n                    formControlName=\"username\"\n                    id=\"username\" \n                    type=\"text\" \n                    class=\"form-control\">\n                <div *ngIf=\"f['username'].touched && f['username'].invalid\" class=\"alert alert-danger\">\n                    <div *ngIf=\"f['username'].errors && f['username'].errors['required']\">username is required.</div>\n                </div>\n            </div>\n    \n            <div class=\"form-group\">\n                <label for=\"password\">password:</label>\n                <input \n                    formControlName=\"password\"\n                    id=\"password\" \n                    type=\"text\" \n                    class=\"form-control\">\n                <div *ngIf=\"f['password'].touched && f['password'].invalid\" class=\"alert alert-danger\">\n                    <div *ngIf=\"f['password'].errors && f['password'].errors['required']\">password is required.</div>\n                </div>\n            </div>\n    \n           \n            <div class=\"form-group\">\n                <label for=\"poleId\">poleId:</label>\n                <input \n                    formControlName=\"poleId\"\n                    id=\"poleId\" \n                    type=\"text\" \n                    class=\"form-control\">\n                <div *ngIf=\"f['poleId'].touched && f['poleId'].invalid\" class=\"alert alert-danger\">\n                    <div *ngIf=\"f['poleId'].errors && f['poleId'].errors['required']\">poleId is required.</div>\n                </div>\n            </div>\n      \n           \n      \n            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!formCam.valid\">Submit</button>\n        </form>\n    </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}